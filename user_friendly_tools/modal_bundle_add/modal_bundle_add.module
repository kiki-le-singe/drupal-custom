<?php

/**
 * @file
 * CTools primary module file.
 *
 * @todo Description.
 */

// Voir : https://gist.github.com/1979037
// Voir : http://awebfactory.com.ar/node/491
// Voir : http://www.spsc.uniroma1.it/sites/all/modules/ctools/help/modal.html
// voir : http://www.ohmydrupal.fr/drupal-7/de-loverlay-ou-tu-veux-quand-tu-veux.html
// 
// ---------------------------------------------------------------------------
// Drupal hooks.

/**
 *  Implements hook_menu()
 */
function modal_bundle_add_menu() {
//  $items['modal_bundle_add_test_page'] = array(
//    'title' => 'tEST',
//    'page callback' => 'modal_bundle_add_test_page',
//    'access callback' => TRUE,
//    'type' => MENU_NORMAL_ITEM,
//  );
  $items['modal_bundle_add/%ctools_js/add'] = array(
    'title' => 'Animal',
    'page callback' => 'modal_bundle_add_test',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['test/%ctools_js/test'] = array(
    'title' => 'Animal',
    'page callback' => 'test',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Implements hook_field_widget_form_alter().
 */
function modal_bundle_add_field_widget_form_alter(&$element, &$form_state, $context) {
  // For performance reasons, If there are several fields "entityreference", these variables were declared static
  static $arg_modal_bundle_add;
  static $add_links = FALSE;
  
  // If arg(0) != 'modal_bundle_add', then we aren't on the modal "add content"
  if (!isset($arg_modal_bundle_add)) {
    $arg_modal_bundle_add = arg(0);

    if ($arg_modal_bundle_add != 'modal_bundle_add') {
      // therefore we allow adding links "add content".
      if (!$add_links) {
        $add_links = TRUE; 
      }
    }
  }
  
  // If we can add the links "entityreference"
  if ($add_links) {  
    
    // We add that for all fields of type "entityreference".
    if ($context['field']['type'] == 'entityreference') {

      modal_bundle_add_library();
      
      dsm($context['field']['settings']['handler_settings']['target_bundles']);
      
      // Loop on the bundles referenced
      foreach ($context['field']['settings']['handler_settings']['target_bundles'] as $type) {
        $_modal_bundle_add_node_type_get_name = _modal_bundle_add_node_type_get_name($type);
        $text_link = t('Add content %type-name', array('%type-name' => $_modal_bundle_add_node_type_get_name['name']));
        
        $element[]['#suffix'] = '<div>' . ctools_modal_text_button($text_link, 'modal_bundle_add/nojs/add', $text_link) . '</div>';
      }

//      $element['#suffix'] = '<div>' . ctools_modal_text_button(t('Add content'), 'modal_bundle_add/nojs/add', t('Pick an animal')) . '</div>';
    }
  }
}

// ---------------------------------------------------------------------------
// Page callbacks

/**
 * Page callback to display links and render a container for AJAX stuff.
 */
/*
function modal_bundle_add_test_page() {
  global $user;

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  // Create a list of clickable links.
  $links = array();

  // Four ways to do our animal picking wizard.
  $links[] = ctools_modal_text_button(t('Wizard (default modal)'), 'modal_bundle_add/nojs/add', t('Pick an animal'));
  $links[] = ctools_modal_text_button(t('Test'), 'test/nojs/test', t('Test'));

  $output = theme('item_list', array('items' => $links, 'title' => t('Actions')));

  return array('markup' => array('#markup' => $output));
}*/

/**
 * A modal login callback.
 */
function modal_bundle_add_test($js = NULL) {
  global $user;
  
  // Fall back if $js is not set.
  if (!$js) {
    return "javascript required";
//    return drupal_get_form('article');
  }  

  // Include your ctools crap here
//  ctools_include('node.pages', 'node', '');
  module_load_include('inc', 'node', 'node.pages');
  ctools_include('modal');
  ctools_include('ajax');

 // Create a blank node object here. You can also set values for your custom fields here as well.
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'article',
//    'language' => LANGUAGE_NONE,
    'language' => $user->language,
  );

  $form_state = array(
  'title' => t('Login'),
//  'ajax' => $js,
  'ajax' => TRUE,
  );
  $form_state['build_info']['args'] = array($node);

  $output = ctools_modal_form_wrapper('article_node_form', $form_state);

  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
    $output = array();
    $output[] = ctools_modal_command_display(t('Success'), '<div class="modal-message">Successful</div>');
    // Close the modal
//    $output[] = ctools_modal_command_dismiss();
  }

  print ajax_render($output);
  exit;


//  ctools_include('modal');
//  ctools_include('ajax');
//
//  ctools_modal_render('Disneyland', 'mickey');
//  $commands = array('mickey');
}

// ---------------------------------------------------------------------------
// Functions

/**
 * Adds all the JS/Ajax libraries for the modal to the page.
 */
function modal_bundle_add_library() {
  static $included = FALSE;

  if (!$included) {
    $included = TRUE;

    if (module_exists('ctools')) {
      ctools_include('ajax');
      ctools_include('modal');
      ctools_modal_add_js();
    }
  }
}

function _modal_bundle_add_node_type_get_name($type = NULL) {
  if ($type != NULL) {
    $select = db_select('node_type', 'nt');
    $select->fields('nt', array('name'))
      ->condition('type', $type);

    return $select->execute()->fetchAssoc();
  }
  return NULL;
}




































/*

// http://preprocess.me/multi-steps-form-in-drupal-7-with-ctools

// http://www.thecarneyeffect.co.uk/ctools-modal-wizard-multistep-form-using-ajax-drupal-7

function test($js = NULL, $step = NULL) {
  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }
  
  $form_info = array(
    'id' => 'kiki',
    'path' => "test/" . ($js ? 'ajax' : 'nojs') . "/test/%step",
    'show trail' => TRUE,
    'show back' => TRUE,
    'show cancel' => TRUE,
    'show return' => FALSE,
    'next callback' =>  'd77_poll_wizard_next',
    'finish callback' => 'ctools_ajax_sample_wizard_finish',
    'cancel callback' => 'd77_poll_wizard_cancel',
    'order' => array( // this controls order, as well as form labels
      'step1' => t('Step 1'),
      'step2' => t('Step 2'),
    ),
    'forms' => array( // here we map a step to a form id.
      'step1' => array( //What we're doing here is telling the wizard when step1 is passed as arg show the form with form_id d7_step_1
        'form id' => 'd77_poll_step_1'
      ),
      'step2' => array(
        'form id' => 'd77_poll_step_2'
      ),
    ),
  );
  
  $object_id = 1;

  if (empty($step)) {
    // We reset the form when $step is NULL because that means they have
    // for whatever reason started over.
    ctools_ajax_sample_cache_clear($object_id);
    $step = 'step1';
  }

  // This automatically gets defaults if there wasn't anything saved.
  $object = ctools_ajax_sample_cache_get($object_id);
  $form_state = array(
    'ajax' => $js,
    // Put our object and ID into the form state cache so we can easily find
    // it.
    'object_id' => $object_id,
    'object' => &$object,
  );
  
  // Send this all off to our form. This is like drupal_get_form only wizardy.
  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  $output = drupal_render($form);

  // If $output is FALSE, there was no actual form.
  if ($js) {
    // If javascript is active, we have to use a render array.
    $commands = array();
    if ($output === FALSE || !empty($form_state['complete'])) {
      // Dismiss the modal.
//      $commands[] = ajax_command_html('#ctools-sample', $animal);
      $commands[] = ctools_modal_command_dismiss();
    }
    else if (!empty($form_state['cancel'])) {
      // If cancelling, return to the activity.
      $commands[] = ctools_modal_command_dismiss();
    }
    else {
      $commands = ctools_modal_form_render($form_state, $output);
    }
    print ajax_render($commands);
    exit;
  }
}


function d77_poll_step_1($form, &$form_state) {
  
  $form_state['title'] = t('What is awesome in Drupal 7?');
  
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('What\'s your name?'),
    '#required' => TRUE,
  );
  
  $form['choices'] = array(
    '#type' => 'radios',
    '#title' => t('What is your favourite new Drupal 7 feature?'),
    '#options' => d77_poll_options(),
    '#default_value' => 0,
    '#required' => TRUE,
  );
  
  return $form;
}

function d77_poll_options() {
  return array(
    'article' => 'Article',
    'page' => 'Page',
  );
}

function d77_poll_step_2($form, &$form_state) {
  
  $name = $form_state['object']['name'];
  $options = d77_poll_options();
  $choice = $options[$form_state['object']['choices']];
  
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Hey @name, tell us why you chose @choice', array(
      '@name' => $name,
      '@choice' => $choice,
    )),
  );
  
  
  return $form;
}


// ---------------------------------------------------------------------------
// Wizard in-between helpers; what to do between or after forms.

function d77_poll_wizard_next(&$form_state) {
  $form_state['object'] = $form_state['values'];
  ctools_ajax_sample_cache_set($form_state['object_id'], $form_state['object']);
}

function d77_poll_wizard_cancel(&$form_state) {
  $form_state['cancel'] = TRUE;
}

*/